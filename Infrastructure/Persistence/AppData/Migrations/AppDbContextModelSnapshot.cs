// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.DbContexts;

#nullable disable

namespace Persistence.AppData.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhaseId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProviderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("PhaseId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Domain.Entities.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("ExamLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExamScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxAttemptCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PassingScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserEnteredExamsUserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserEnteredExamsUserEmail");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaxSalary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MinSalary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAppliedJobsUserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAppliedJobsUserEmail");

                    b.ToTable("Jobs", t =>
                        {
                            t.HasCheckConstraint("ensure_salary_Range_check", "[MaxSalary] >= [MinSalary]");
                        });
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.JobRequiredSkills", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("RequiredProficiency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobRequiredSkills");
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.PhaseProvidedSkills", b =>
                {
                    b.Property<int>("PhaseId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<string>("RecommendationReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhaseId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("PhaseProvidedSkills", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.UserAcquiredSkills", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("AcquiredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("UserEmail");

                    b.ToTable("UserAcquiredSkills");
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.UserAppliedJobs", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ApplicationStatusStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserEmail");

                    b.ToTable("UserAppliedJobs");
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.UserEnrolledTracks", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EnrollmentStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserEmail");

                    b.ToTable("UserEnrolledTracks");
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.UserEnteredExams", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserEmail");

                    b.ToTable("UserEnteredExams");
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.UserPassedPhases", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserEmail");

                    b.ToTable("UserPassedPhases");
                });

            modelBuilder.Entity("Domain.Entities.Phase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EstimatedDuration")
                        .HasColumnType("time");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.Property<string>("UserPassedPhasesUserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId")
                        .IsUnique();

                    b.HasIndex("TrackId");

                    b.HasIndex("UserPassedPhasesUserEmail");

                    b.ToTable("Phases");
                });

            modelBuilder.Entity("Domain.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAcquiredSkillsUserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseID");

                    b.HasIndex("ExamID");

                    b.HasIndex("UserAcquiredSkillsUserEmail");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Domain.Entities.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EstimatedDuration")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEnrolledTracksUserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TrackId");

                    b.HasIndex("UserEnrolledTracksUserEmail");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Domain.Entities.TrackPrerequisites", b =>
                {
                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.Property<string>("PrerequisiteDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrerequisiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrackId");

                    b.ToTable("TrackPrerequisites");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.HasOne("Domain.Entities.Phase", "Phase")
                        .WithMany("Courses")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Phase");
                });

            modelBuilder.Entity("Domain.Entities.Exam", b =>
                {
                    b.HasOne("Domain.Entities.JoinEntities.UserEnteredExams", null)
                        .WithMany("Exams")
                        .HasForeignKey("UserEnteredExamsUserEmail");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.HasOne("Domain.Entities.JoinEntities.UserAppliedJobs", null)
                        .WithMany("Jobs")
                        .HasForeignKey("UserAppliedJobsUserEmail");

                    b.OwnsOne("Domain.Entities.Common.Address", "Location", b1 =>
                        {
                            b1.Property<int>("JobId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.JobRequiredSkills", b =>
                {
                    b.HasOne("Domain.Entities.Job", "Job")
                        .WithMany("JobRequiredSkills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Skill", "Skill")
                        .WithMany("JobRequiredSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.PhaseProvidedSkills", b =>
                {
                    b.HasOne("Domain.Entities.Phase", "Phase")
                        .WithMany("PhaseProvidedSkills")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Skill", "Skill")
                        .WithMany("PhaseProvidedSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Phase");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.Entities.Phase", b =>
                {
                    b.HasOne("Domain.Entities.Exam", "Exam")
                        .WithOne("Phase")
                        .HasForeignKey("Domain.Entities.Phase", "ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Track", "Track")
                        .WithMany("Phases")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.JoinEntities.UserPassedPhases", null)
                        .WithMany("Phases")
                        .HasForeignKey("UserPassedPhasesUserEmail");

                    b.Navigation("Exam");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Domain.Entities.Skill", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Skills")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Exam", "Exam")
                        .WithMany("Skills")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.JoinEntities.UserAcquiredSkills", null)
                        .WithMany("Skills")
                        .HasForeignKey("UserAcquiredSkillsUserEmail");

                    b.Navigation("Course");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Domain.Entities.Track", b =>
                {
                    b.HasOne("Domain.Entities.JoinEntities.UserEnrolledTracks", null)
                        .WithMany("Tracks")
                        .HasForeignKey("UserEnrolledTracksUserEmail");
                });

            modelBuilder.Entity("Domain.Entities.TrackPrerequisites", b =>
                {
                    b.HasOne("Domain.Entities.Track", "Track")
                        .WithMany("TrackPrerequisites")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Domain.Entities.Exam", b =>
                {
                    b.Navigation("Phase")
                        .IsRequired();

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Navigation("JobRequiredSkills");
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.UserAcquiredSkills", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.UserAppliedJobs", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.UserEnrolledTracks", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.UserEnteredExams", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Domain.Entities.JoinEntities.UserPassedPhases", b =>
                {
                    b.Navigation("Phases");
                });

            modelBuilder.Entity("Domain.Entities.Phase", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("PhaseProvidedSkills");
                });

            modelBuilder.Entity("Domain.Entities.Skill", b =>
                {
                    b.Navigation("JobRequiredSkills");

                    b.Navigation("PhaseProvidedSkills");
                });

            modelBuilder.Entity("Domain.Entities.Track", b =>
                {
                    b.Navigation("Phases");

                    b.Navigation("TrackPrerequisites");
                });
#pragma warning restore 612, 618
        }
    }
}
